[api]
enabled = true
address = "0.0.0.0:8686"
playground = true

[sources.vector_agents]
type = "vector"
address = "0.0.0.0:9000"
version = "2"

[sources.fluent_bit_agents]
type = "fluent"
address = "0.0.0.0:24224"

[transforms.logs_router]
type = "route"
inputs = ["*_agents"]

[transforms.logs_router.route]
http_logs = '.tag == "http_logs"'
transaction_logs = '.tag == "transaction_logs"'
syslog_logs = '.tag == "syslog_logs"'
fluent_bit_logs = '.tag == "fluent_bit_logs"'

[transforms.redact_transaction_logs]
type = "remap"
inputs = ["logs_router.transaction_logs"]
source = '''
# Parse JSON string
. = parse_json!(.message)

# Apply email address redaction filter
. = redact(., filters: [
  r'(\w+)@(\w+).(\w+)'
])
'''

[transforms.parse_and_sanitize_http_logs]
type = "remap"
inputs = ["logs_router.http_logs"]
source = '''
. = parse_json!(.message)

# Remove user information
del(."user-identifier")

# Convert raw .bytes field into a resource string
# (no need for error handling as we know we're not dividing by zero)
kb, _ = .bytes / 1024

.size = to_string(round(kb)) + "kB"
del(.bytes)

# Convert HTTP status to integer
status = to_int!(del(.status))

# Add a success field based on HTTP status
.success = status >= 200 && status <= 400

# Convert IP to IPv6
.host = ip_to_ipv6!(.host)

# Display only the host for the referer
url = parse_url!(.referer)
.referer = url.host

# Provide Unix timestamp
ts = parse_timestamp!(del(.datetime), format: "%d/%b/%Y:%T")
.timestamp = to_unix_timestamp(ts)
'''

# Convert Syslog logs to JSON objects
[transforms.parse_and_sanitize_syslog_logs]
type = "remap"
inputs = ["logs_router.syslog_logs"]
source = '''
. = parse_syslog!(.message)

# Provide a Unix timestamp
ts = parse_timestamp!(.timestamp, format: "%+")
.timestamp = to_unix_timestamp(ts)

# Delete some unnecessary fields
del(.msgid)
del(.procid)
'''

[transforms.parse_and_sanitize_fluent_bit_logs]
type = "remap"
inputs = ["logs_router.fluent_bit_logs"]
source = '''
ts = parse_timestamp!(.timestamp, format: "%+")
ts = to_unix_timestamp(ts)

. = { "value": .rand_value, "host": ip_to_ipv6!(.host), "timestamp": ts }
'''

# Filter out OPTION requests
[transforms.filter_http_logs]
type = "filter"
inputs = ["parse_and_sanitize_http_logs"]
condition = '!includes(["OPTION", "HEAD"], .method) && .request != "/wp-admin"'

# Filter out non-urgent logs
[transforms.filter_syslog_logs]
type = "filter"
inputs = ["parse_and_sanitize_syslog_logs"]
condition = 'to_syslog_severity!(.severity) < 4'

[sinks.json_out]
type = "console"
inputs = ["filter_*", "parse_and_sanitize_fluent_bit_logs", "redact_transaction_logs"]
target = "stdout"

[sinks.json_out.encoding]
codec = "json"
