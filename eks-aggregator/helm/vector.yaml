role: Stateless-Aggregator

image:
  tag: nightly-2021-09-16-distroless-libc

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5

resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 200m
    memory: 256Mi

env:
  - name: DATADOG_API_KEY
    valueFrom:
      secretKeyRef:
        name: vector
        key: DATADOG_API_KEY

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"

customConfig:
  api:
    enabled: true
    address: 0.0.0.0:8686
  sources:
    datadog_agents:
      type: datadog_agent
      acknowledgements: true
      address: 0.0.0.0:8080
    internal_metrics:
      type: internal_metrics
  transforms:
    remap:
      type: remap
      inputs:
        - datadog_agents
      source: |
        .ddtags = parse_key_value!(.ddtags, key_value_delimiter: ":", field_delimiter: ",")
        .ddtags.sender = "vector"
        .ddtags.vector_aggregator = get_hostname!()
        .ddtags = encode_key_value(.ddtags, key_value_delimiter: ":", field_delimiter: ",")

        parsed =
          parse_json(.message) ??
          parse_syslog(.message) ??
          parse_apache_log(.message, format: "common") ??
          {}

        if is_integer(parsed.status) {
          parsed.http.status_code = del(parsed.status)
          if parsed.http.status_code >= 500 && parsed.http.status_code < 600 { parsed.status = "error" }
          if parsed.http.status_code >= 400 && parsed.http.status_code < 500 { parsed.status = "warn" }
          if parsed.http.status_code >= 300 && parsed.http.status_code < 400 { parsed.status = "info" }
          if parsed.http.status_code >= 200 && parsed.http.status_code < 300 { parsed.status = "ok" }
        }

        if exists(parsed.method) { parsed.http.method = del(parsed.method) }
        if exists(parsed.referer) { parsed.http.referer = del(parsed.referer) }
        if exists(parsed.path) { parsed.http.url_details.path = del(parsed.path) }
        if exists(parsed.host) { parsed.network.client.ip = del(parsed.host) }

        . = merge(., object!(parsed))

        .uuid = uuid_v4()
  sinks:
    to_datadog:
      type: datadog_logs
      inputs:
        - remap
      default_api_key: "${DATADOG_API_KEY}"
      encoding:
        codec: json
    prom_exporter:
      type: prometheus_exporter
      inputs:
        - internal_metrics
      address: 0.0.0.0:9090
